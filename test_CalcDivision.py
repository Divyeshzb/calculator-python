# ********RoostGPT********
"""
Test generated by RoostGPT for test python-calculator-unit using AI Type  and AI Model 

ROOST_METHOD_HASH=division_531bd48a9c
ROOST_METHOD_SIG_HASH=division_eae366bb2d


```
Scenario 1: Test Division Function With Two Positive Numbers
Details:
  TestName: test_division_with_two_positive_numbers
  Description: This test ensures that the division function correctly returns the quotient of two positive numbers.
Execution:
  Arrange: Initialize two positive numbers num1 and num2.
  Act: Call the division function with num1 and num2 as parameters.
  Assert: Check if the return value of the function equals num1 / num2.
Validation:
  Division of two positive numbers is a common case and exposes the regular working of the function, hence this scenario is vital for validating the basic business logic of correct division operations.

Scenario 2: Test Division Function With Two Negative Numbers
Details:
  TestName: test_division_with_two_negative_numbers
  Description: This test ensures that the division function correctly returns the quotient of two negative numbers.
Execution:
  Arrange: Initialize two negative numbers num1 and num2.
  Act: Call the division function with num1 and num2 as parameters.
  Assert: Check if the return value of the function equals num1 / num2.
Validation:
  This test is crucial to ensure the division function handles negative numbers correctly. So, it is an important scenario in validating the overall behavior of the function.

Scenario 3: Division Function With Zero As The Divisor
Details:
  TestName: test_division_by_zero
  Description: This test ensures that the division function correctly throws an error message when attempting to divide by zero.
Execution:
  Arrange: Initialize num1 with any number and num2 with zero.
  Act: Call the division function with num1 and num2 as parameters.
  Assert: Check if the return value equals "Cannot divide by zero".
Validation:
  Division by zero is a mathematically undefined operation, hence this test ensures the function correctly handles such scenarios by generating appropriate error message.

Scenario 4: Division Function With Zero As The Dividend
Details:
  TestName: test_division_of_zero
  Description: This test checks if the function returns zero when the dividend is zero and the divisor is any non-zero number.
Execution:
  Arrange: Initialize num1 with zero and num2 with any non-zero number.
  Act: Call the division function with num1 and num2 as parameters.
  Assert: Check if the return value equals zero.
Validation:
  Division of zero by any number apart from zero is always zero, and hence this test confirms the functionality of the division function in that case.
```
"""

# ********RoostGPT********
# unittests.py
import pytest
from calc import division

class Test_CalcDivision:
    
    @pytest.mark.positive
    def test_division_with_two_positive_numbers(self):
        # Arrange
        num1, num2 = 10, 2
        expected_result = num1 / num2

        # Act
        result = division(num1, num2)

        # Assert
        assert result == expected_result, "division of two positive numbers failed"

    @pytest.mark.negative
    def test_division_with_two_negative_numbers(self):
        # Arrange
        num1, num2 = -10, -2
        expected_result = num1 / num2

        # Act
        result = division(num1, num2)

        # Assert
        assert result == expected_result, "division of two negative numbers failed"
        
    @pytest.mark.negative
    def test_division_by_zero(self):
        # Arrange
        num1, num2 = 10, 0
        expected_result = "Cannot divide by zero"

        # Act
        result = division(num1, num2)

        # Assert
        assert result == expected_result, "division by zero test failed"
        
    @pytest.mark.positive
    def test_division_of_zero(self):
        # Arrange
        num1, num2 = 0, 10
        expected_result = 0

        # Act
        result = division(num1, num2)

        # Assert
        assert result == expected_result, "division of zero by non-zero number failed"
