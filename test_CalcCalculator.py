# ********RoostGPT********
"""
Test generated by RoostGPT for test python-calculator-unit using AI Type  and AI Model 

ROOST_METHOD_HASH=calculator_9ebd2df6b3
ROOST_METHOD_SIG_HASH=calculator_ad84dc0779


Scenario 1: Test the result with valid addition operation
Details:
  TestName: test_addition
  Description: This test validates that the calculator function correctly performs addition when the '+' operation is passed.
Execution:
  Arrange: Initialize two numbers for addition.
  Act: Call the calculator function with the numbers and '+' as the operation.
  Assert: Check that the result matches the expected sum of the two numbers.
Validation:
  This test is important to ensure that the calculator correctly handles addition, which is a fundamental functionality for a calculator.

Scenario 2: Test the result with valid subtraction operation
Details:
  TestName: test_subtraction
  Description: This test validates that the calculator function correctly performs subtraction when the '-' operation is passed.
Execution:
  Arrange: Initialize two numbers for subtraction.
  Act: Call the calculator function with the numbers and '-' as the operation.
  Assert: Check that the result matches the expected difference of the two numbers.
Validation:
  This test is important to ensure that the calculator correctly handles subtraction, which is one of the basic mathematical operations.

Scenario 3: Test the result with valid multiplication operation
Details:
  TestName: test_multiplication
  Description: This test validates that the calculator function correctly performs multiplication when the '*' operation is passed.
Execution:
  Arrange: Initialize two numbers for multiplication.
  Act: Call the calculator function with the numbers and '*' as the operation.
  Assert: Check that the result matches the expected product of the two numbers.
Validation:
  This test is crucial to verify the multiplication operation of the calculator, very common in general calculations.

Scenario 4: Test the result with valid division operation
Details:
  TestName: test_division
  Description: This test validates that the calculator function correctly performs division when the '/' operation is passed.
Execution:
  Arrange: Initialize two numbers for division.
  Act: Call the calculator function with the numbers and '/' as the operation.
  Assert: Check that the result matches the expected quotient of the two numbers.
Validation:
  Verification of division operation is essential because it's a common calculation in many fields such as finance, science etc.

Scenario 5: Test division by zero handling
Details:
  TestName: test_division_by_zero
  Description: This test verifies that the calculator function correctly handles an attempt to divide by zero.
Execution:
  Arrange: Initialize a number and zero for division.
  Act: Call the calculator function with the number, zero, and '/' as the operation.
  Assert: Check that the result is the expected error message: "Cannot divide by zero".
Validation:
  This test is significant because dividing by zero is undefined in mathematics, and thus the calculator should correctly report this condition.

Scenario 6: Test handling of invalid operation
Details:
  TestName: test_invalid_operation
  Description: This test validates that the calculator function correctly responds when provided with an invalid operation.
Execution:
  Arrange: Initialize two numbers and an invalid operation symbol.
  Act: Call the calculator function with the numbers and the invalid operation symbol.
  Assert: Check that the result is the expected error message: "Invalid operation".
Validation:
  This test is significant to ensure that the calculator can correctly handle unrecognized operations, maintaining application robustness.
"""

# ********RoostGPT********
import pytest
from calc import calculator

class Test_CalcCalculator:
  
    def test_addition(self):
        num1, num2 = 7, 3
        expected_result = 10
        result = calculator(num1, num2, '+')
        assert result == expected_result, "The calculator did not correctly perform addition."

    def test_subtraction(self):
        num1, num2 = 7, 3
        expected_result = 4
        result = calculator(num1, num2, '-')
        assert result == expected_result, "The calculator did not correctly perform subtraction."

    def test_multiplication(self):
        num1, num2 = 7, 3
        expected_result = 21
        result = calculator(num1, num2, '*')
        assert result == expected_result, "The calculator did not correctly perform multiplication."

    def test_division(self):
        num1, num2 = 9, 3
        expected_result = 3
        result = calculator(num1, num2, '/')
        assert result == expected_result, "The calculator did not correctly perform division."

    def test_division_by_zero(self):
        num1, num2 = 7, 0
        expected_result = "Cannot divide by zero"
        result = calculator(num1, num2, '/')
        assert result == expected_result, "The calculator did not correctly handle division by zero."

    def test_invalid_operation(self):
        num1, num2 = 7, 3
        expected_result = "Invalid operation"
        result = calculator(num1, num2, '^')
        assert result == expected_result, "The calculator did not correctly handle an invalid operation."
